type Query {
  comics(name: String!, after: String, first: Int): ComicConnection!
  episodes(comicId: ID!, after: String, first: Int): EpisodeConnection!
  sources: [Source!]!
  source(sourceId: ID!): Source
}

type Mutation {
  sourceCreate(source: SourceInput!): SourceCreatePayload! @authenticated
  sourceDelete(sourceId: ID!): SourceDeletePayload! @authenticated
}

type Comic {
  id: ID!
  name: String!
  episodes(after: String, first: Int): EpisodeConnection!
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

type Episode {
  id: ID!
  name: String!
  no: Int!
  pages: [ Page! ]
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

type Source {
  id: ID!
  name: String!
  hostname: String!
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

input SourceInput {
  name: String!
  hostname: String!
}

type ComicConnection {
  edges: [ComicEdge!]
  pageInfo: PageInfo!
}

type ComicEdge {
  cursor: String!
  node: Comic!
}

type EpisodeConnection {
  edges: [EpisodeEdge!]
  pageInfo: PageInfo!
}

type EpisodeEdge {
  cursor: String!
  node: Episode!
}

type PageInfo {
  startCursor: String!
  hasNextPage: Boolean!
}

type Page {
  id: ID!
  link: String!
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

type SourceCreatePayload {
  source: Source
  userError: [UserError!]!
}

type SourceDeletePayload {
  source: Source
  userError: [UserError!]!
}

type UserError {
  message: String!
  field: [String!]
}

scalar Timestamp

directive @authenticated on FIELD_DEFINITION
