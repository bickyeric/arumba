type Query {
  comics(name: String!, after: String, first: Int): ComicConnection!
  episodes(comicId: ID!, after: String, first: Int): EpisodeConnection!
}

type Comic {
  id: ID!
  name: String!
  episodes(after: String, first: Int): EpisodeConnection!
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

type Episode {
  id: ID!
  name: String!
  no: Int!
  pages: [ Page! ]
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

type ComicConnection {
  edges: [ComicEdge!]
  pageInfo: PageInfo!
}

type ComicEdge {
  cursor: String!
  node: Comic!
}

type EpisodeConnection {
  edges: [EpisodeEdge!]
  pageInfo: PageInfo!
}

type EpisodeEdge {
  cursor: String!
  node: Episode!
}

type PageInfo {
  startCursor: String!
  hasNextPage: Boolean!
}

type Page {
  id: ID!
  link: String!
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

scalar Timestamp
