// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bickyeric/arumba/repository (interfaces: IComic)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/bickyeric/arumba/model"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockIComic is a mock of IComic interface
type MockIComic struct {
	ctrl     *gomock.Controller
	recorder *MockIComicMockRecorder
}

// MockIComicMockRecorder is the mock recorder for MockIComic
type MockIComicMockRecorder struct {
	mock *MockIComic
}

// NewMockIComic creates a new mock instance
func NewMockIComic(ctrl *gomock.Controller) *MockIComic {
	mock := &MockIComic{ctrl: ctrl}
	mock.recorder = &MockIComicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIComic) EXPECT() *MockIComicMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockIComic) All() ([]*model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockIComicMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIComic)(nil).All))
}

// Find mocks base method
func (m *MockIComic) Find(arg0 string) (model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockIComicMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIComic)(nil).Find), arg0)
}

// FindAll mocks base method
func (m *MockIComic) FindAll(arg0 string) ([]model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockIComicMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIComic)(nil).FindAll), arg0)
}

// FindByID mocks base method
func (m *MockIComic) FindByID(arg0 primitive.ObjectID) (model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockIComicMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIComic)(nil).FindByID), arg0)
}

// Insert mocks base method
func (m *MockIComic) Insert(arg0 *model.Comic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockIComicMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIComic)(nil).Insert), arg0)
}
