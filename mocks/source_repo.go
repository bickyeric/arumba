// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bickyeric/arumba/repository (interfaces: ISource)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/bickyeric/arumba/model"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockISource is a mock of ISource interface
type MockISource struct {
	ctrl     *gomock.Controller
	recorder *MockISourceMockRecorder
}

// MockISourceMockRecorder is the mock recorder for MockISource
type MockISourceMockRecorder struct {
	mock *MockISource
}

// NewMockISource creates a new mock instance
func NewMockISource(ctrl *gomock.Controller) *MockISource {
	mock := &MockISource{ctrl: ctrl}
	mock.recorder = &MockISourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISource) EXPECT() *MockISourceMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockISource) All() ([]*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockISourceMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockISource)(nil).All))
}

// FindByID mocks base method
func (m *MockISource) FindByID(arg0 primitive.ObjectID) (model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockISourceMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockISource)(nil).FindByID), arg0)
}

// Insert mocks base method
func (m *MockISource) Insert(arg0 model.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockISourceMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockISource)(nil).Insert), arg0)
}
