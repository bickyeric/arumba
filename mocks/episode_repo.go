// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bickyeric/arumba/repository (interfaces: IEpisode)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/bickyeric/arumba/model"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockIEpisode is a mock of IEpisode interface
type MockIEpisode struct {
	ctrl     *gomock.Controller
	recorder *MockIEpisodeMockRecorder
}

// MockIEpisodeMockRecorder is the mock recorder for MockIEpisode
type MockIEpisodeMockRecorder struct {
	mock *MockIEpisode
}

// NewMockIEpisode creates a new mock instance
func NewMockIEpisode(ctrl *gomock.Controller) *MockIEpisode {
	mock := &MockIEpisode{ctrl: ctrl}
	mock.recorder = &MockIEpisodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEpisode) EXPECT() *MockIEpisodeMockRecorder {
	return m.recorder
}

// AllByComicID mocks base method
func (m *MockIEpisode) AllByComicID(arg0 primitive.ObjectID) ([]*model.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllByComicID", arg0)
	ret0, _ := ret[0].([]*model.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllByComicID indicates an expected call of AllByComicID
func (mr *MockIEpisodeMockRecorder) AllByComicID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllByComicID", reflect.TypeOf((*MockIEpisode)(nil).AllByComicID), arg0)
}

// Count mocks base method
func (m *MockIEpisode) Count(arg0 primitive.ObjectID, arg1 ...float64) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockIEpisodeMockRecorder) Count(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIEpisode)(nil).Count), varargs...)
}

// FindByNo mocks base method
func (m *MockIEpisode) FindByNo(arg0 primitive.ObjectID, arg1 float64) (*model.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNo", arg0, arg1)
	ret0, _ := ret[0].(*model.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNo indicates an expected call of FindByNo
func (mr *MockIEpisodeMockRecorder) FindByNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNo", reflect.TypeOf((*MockIEpisode)(nil).FindByNo), arg0, arg1)
}

// Insert mocks base method
func (m *MockIEpisode) Insert(arg0 *model.Episode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockIEpisodeMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIEpisode)(nil).Insert), arg0)
}

// No mocks base method
func (m *MockIEpisode) No(arg0 primitive.ObjectID, arg1 int, arg2 ...float64) (float64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "No", varargs...)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// No indicates an expected call of No
func (mr *MockIEpisodeMockRecorder) No(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "No", reflect.TypeOf((*MockIEpisode)(nil).No), varargs...)
}
