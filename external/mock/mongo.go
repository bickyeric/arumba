// Code generated by MockGen. DO NOT EDIT.
// Source: mongo.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	reflect "reflect"
)

// MockMongoDatabase is a mock of MongoDatabase interface
type MockMongoDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDatabaseMockRecorder
}

// MockMongoDatabaseMockRecorder is the mock recorder for MockMongoDatabase
type MockMongoDatabaseMockRecorder struct {
	mock *MockMongoDatabase
}

// NewMockMongoDatabase creates a new mock instance
func NewMockMongoDatabase(ctrl *gomock.Controller) *MockMongoDatabase {
	mock := &MockMongoDatabase{ctrl: ctrl}
	mock.recorder = &MockMongoDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMongoDatabase) EXPECT() *MockMongoDatabaseMockRecorder {
	return m.recorder
}

// Collection mocks base method
func (m *MockMongoDatabase) Collection(name string, opts ...*options.CollectionOptions) *mongo.Collection {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(*mongo.Collection)
	return ret0
}

// Collection indicates an expected call of Collection
func (mr *MockMongoDatabaseMockRecorder) Collection(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockMongoDatabase)(nil).Collection), varargs...)
}
