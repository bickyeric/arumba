// Code generated by MockGen. DO NOT EDIT.
// Source: comic.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "github.com/bickyeric/arumba/model"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockIComic is a mock of IComic interface
type MockIComic struct {
	ctrl     *gomock.Controller
	recorder *MockIComicMockRecorder
}

// MockIComicMockRecorder is the mock recorder for MockIComic
type MockIComicMockRecorder struct {
	mock *MockIComic
}

// NewMockIComic creates a new mock instance
func NewMockIComic(ctrl *gomock.Controller) *MockIComic {
	mock := &MockIComic{ctrl: ctrl}
	mock.recorder = &MockIComicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIComic) EXPECT() *MockIComicMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockIComic) Find(name string) (model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", name)
	ret0, _ := ret[0].(model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockIComicMockRecorder) Find(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIComic)(nil).Find), name)
}

// FindByID mocks base method
func (m *MockIComic) FindByID(id primitive.ObjectID) (model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockIComicMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIComic)(nil).FindByID), id)
}

// FindByName mocks base method
func (m *MockIComic) FindByName(arg0 context.Context, arg1 string) (model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockIComicMockRecorder) FindByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockIComic)(nil).FindByName), arg0, arg1)
}

// FindAll mocks base method
func (m *MockIComic) FindAll(ctx context.Context, name string, first, offset int) ([]model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, name, first, offset)
	ret0, _ := ret[0].([]model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockIComicMockRecorder) FindAll(ctx, name, first, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIComic)(nil).FindAll), ctx, name, first, offset)
}

// Insert mocks base method
func (m *MockIComic) Insert(arg0 *model.Comic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockIComicMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIComic)(nil).Insert), arg0)
}

// CreateIndex mocks base method
func (m *MockIComic) CreateIndex(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockIComicMockRecorder) CreateIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockIComic)(nil).CreateIndex), arg0)
}
