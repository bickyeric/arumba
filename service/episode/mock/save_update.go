// Code generated by MockGen. DO NOT EDIT.
// Source: save_update.go

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/bickyeric/arumba/model"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockUpdateSaver is a mock of UpdateSaver interface
type MockUpdateSaver struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateSaverMockRecorder
}

// MockUpdateSaverMockRecorder is the mock recorder for MockUpdateSaver
type MockUpdateSaverMockRecorder struct {
	mock *MockUpdateSaver
}

// NewMockUpdateSaver creates a new mock instance
func NewMockUpdateSaver(ctrl *gomock.Controller) *MockUpdateSaver {
	mock := &MockUpdateSaver{ctrl: ctrl}
	mock.recorder = &MockUpdateSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateSaver) EXPECT() *MockUpdateSaverMockRecorder {
	return m.recorder
}

// Perform mocks base method
func (m *MockUpdateSaver) Perform(update model.Update, sourceID primitive.ObjectID) (model.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perform", update, sourceID)
	ret0, _ := ret[0].(model.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Perform indicates an expected call of Perform
func (mr *MockUpdateSaverMockRecorder) Perform(update, sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perform", reflect.TypeOf((*MockUpdateSaver)(nil).Perform), update, sourceID)
}
