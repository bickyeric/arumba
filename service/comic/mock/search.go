// Code generated by MockGen. DO NOT EDIT.
// Source: search.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "github.com/bickyeric/arumba/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSearcher is a mock of Searcher interface
type MockSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockSearcherMockRecorder
}

// MockSearcherMockRecorder is the mock recorder for MockSearcher
type MockSearcherMockRecorder struct {
	mock *MockSearcher
}

// NewMockSearcher creates a new mock instance
func NewMockSearcher(ctrl *gomock.Controller) *MockSearcher {
	mock := &MockSearcher{ctrl: ctrl}
	mock.recorder = &MockSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearcher) EXPECT() *MockSearcherMockRecorder {
	return m.recorder
}

// Perform mocks base method
func (m *MockSearcher) Perform(ctx context.Context, name string) ([]model.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perform", ctx, name)
	ret0, _ := ret[0].([]model.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Perform indicates an expected call of Perform
func (mr *MockSearcherMockRecorder) Perform(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perform", reflect.TypeOf((*MockSearcher)(nil).Perform), ctx, name)
}
